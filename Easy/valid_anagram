Original solution:
class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_set<char> seen;
        if (s.length() != t.length()) {
            return false;
        }
        for (int i = 0; i < s.length(); ++i) {
            seen.insert(s[i]);
        }
        for (int i = 0; i < t.length(); ++i) {
            if (seen.count(t[i]) == 0) {
                return false;
            }
        }
        return true;
    }
};
didn't understand what an anagram really was... after looking at it, it has to contain the same characters in the same amount, so order doesnt matter
therefore we need to sort.
class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) {
            return false;
        }
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        return s == t;
    }
};
yay! I finally understand what an anagram is! :D 